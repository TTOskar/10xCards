---
description: Tailwind CSS and UI component best practices for modern web applications
globs: **/*.css, **/*.tsx, **/*.jsx, tailwind.config.js, tailwind.config.ts
alwaysApply: false
---

# Tailwind CSS and Flowbite Best Practices

## Project Setup
- Use proper Tailwind configuration
- Configure theme extension properly
- Set up proper purge configuration
- Use proper plugin integration
- Configure custom spacing and breakpoints
- Set up proper color palette

## Component Styling
- Use utility classes over custom CSS
- Group related utilities with @apply when needed
- Use proper responsive design utilities
- Implement dark mode properly
- Use proper state variants
- Keep component styles consistent

## Layout
- Use Flexbox and Grid utilities effectively
- Implement proper spacing system
- Use container queries when needed
- Implement proper responsive breakpoints
- Use proper padding and margin utilities
- Implement proper alignment utilities

## Typography
- Use proper font size utilities
- Implement proper line height
- Use proper font weight utilities
- Configure custom fonts properly
- Use proper text alignment
- Implement proper text decoration

## Colors
- Use semantic color naming
- Implement proper color contrast
- Use opacity utilities effectively
- Configure custom colors properly
- Use proper gradient utilities
- Implement proper hover states

## Components
- Use Flowbite components as primary UI building blocks
- Follow Flowbite component structure exactly as documented
- Customize Flowbite components using Tailwind utilities
- Keep dark mode support for all Flowbite components
- Maintain consistent spacing between Flowbite components
- Use Flowbite's interactive components (dropdowns, modals, etc.) with proper JavaScript initialization
- Implement proper ARIA attributes for accessibility
- Use proper Flowbite data attributes for JavaScript functionality
- Keep component variants consistent with Flowbite's design system
- Implement proper animations and transitions as provided by Flowbite
- Ensure proper mobile responsiveness of Flowbite components
- Use Flowbite's form components for consistent form styling

## Flowbite Integration
- Use CDN links in base template for both CSS and JS
- Initialize Flowbite components properly in JavaScript when needed
- Follow Flowbite's markup structure precisely
- Use Flowbite's predefined color schemes
- Implement proper dark mode toggle using Flowbite's system
- Use Flowbite's grid system in conjunction with Tailwind's
- Keep Flowbite component classes grouped together
- Maintain proper order of utility classes vs Flowbite classes
- Use Flowbite's interactive components with proper event handling
- Follow Flowbite's accessibility guidelines

## Responsive Design
- Use mobile-first approach
- Implement proper breakpoints
- Use container queries effectively
- Handle different screen sizes properly
- Implement proper responsive typography
- Use proper responsive spacing

## Performance
- Use proper purge configuration
- Minimize custom CSS
- Use proper caching strategies
- Implement proper code splitting
- Optimize for production
- Monitor bundle size

## Best Practices
- Follow naming conventions
- Keep styles organized
- Use proper documentation
- Implement proper testing
- Follow accessibility guidelines
- Use proper version control

## Flowbite Component Guidelines
- Buttons: Use Flowbite's button components with proper variants (primary, secondary, outline)
- Forms: Implement form elements using Flowbite's form components
- Modals: Use Flowbite's modal system with proper triggers and closers
- Navigation: Implement responsive navigation using Flowbite's navbar components
- Cards: Use Flowbite's card components for consistent content containers
- Tables: Implement tables using Flowbite's table components
- Alerts: Use Flowbite's alert system for user notifications
- Dropdowns: Implement dropdowns using Flowbite's dropdown system
- Tabs: Use Flowbite's tab components for content organization
- Tooltips: Implement tooltips using Flowbite's tooltip system 